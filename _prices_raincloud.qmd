```{r}
# desired future inputs:  
# community size
# sector
# year
# weighted/unweighted
```


```{ojs}
// active inputs

// weighted/unweighted
viewof dimension = Inputs.select(['residential_price', 'commercial_price', 'other_price'], { label: 'Sector', value: 'residential_price' })

// viewof flipCoords = Inputs.toggle({ label: 'Flip', value: false })

// Inputs.table(customers_pivot)
```

```{ojs}
// hardcoded inputs here

// viewof thresholds = Inputs.select([10, 20, 60], { label: 'Bins', value: 60 })
thresholds = 40

// viewof seed = Inputs.range([1, 100], { step: 1, label: 'Raw Data Seed', value: 1 })
seed = 1

// viewof rawDataSize = Inputs.range([10, 100], { value: 40, step: 10, label: 'Raw Data Size (%)' })
rawDataSize = 20

// viewof rawDataOffset = Inputs.range([0, 50], { value: 5, step: 5, label: 'Raw Data Offset (%)' })
rawDataOffset = 5

```




```{ojs}
Plot.plot(rainCloudX)

```




```{ojs}
rainCloudX = ({
  grid: true,
  label: null,
  marks: [
    Plot.ruleX([0]),
    halfViolinX,
    rawDataX
  ],
  facet: {
    data: data,
    y: 'acep_energy_region',
    marginRight: 80
  },
  x: {
    label: "Cents per Kilowatt Hour",
    domain: [0, 160]
  },
  y: {
    ticks: 0,
    tickFormat: d => d < 0 ? '' : d 
  },
  color: {
      domain: ["Coastal", "Railbelt", "Rural Remote"],
      range: ["#4285F4", "#34A853", "#EA4335"]
  }
})
```


```{ojs}
halfViolinX = Plot.areaY(
  data,
  Plot.binX(
    {
      y: 'count'
    },
    {
      x: dimension,
      fill: 'acep_energy_region',
      thresholds: thresholds,
      curve: 'basis'
    }
  )
)
```


```{ojs}
rawDataX = Plot.dot(
  data,
  {
	  x: dimension,
    y: jitter(data, seed),
    fill: 'acep_energy_region',
    r: 1.5,
    channels: {Name: "reporting_name", Year: "year"},
    tip: {format: {fill: false, 
                  fy: false, 
                  y: false
                  }}

  }
)

// tip = Plot.tip(
//   data, Plot.pointer(
//   {
//   x: dimension,
//   y: 'acep_energy_region',
//   format: {
//     year: true,
//     reporting_name: true,
//     dimension: true,
//     filter: (d) => d.reporting_name,
//     title: (d) => [d.reporting_name, d.year].join("\n\n")
//     stroke: false
//   }
//   }
// )
// )

```


```{ojs}
//| echo: false
// appendix

jitter = (data, seed) => {
  const rng = seedrandom(seed);
  return data.map(() => -(rng() * rawDataSize + rawDataOffset) * maxTotal / 100);
}

maxTotal = d3.max(
  Array.from(
    d3
    .group(data, d => d.aea_energy_region)
    .values()
  )
  .flatMap(g => bins(g.map(d => d[dimension])))
  .map(bin => bin.length)
)

bins = d3
  .bin()
  .domain(d3.extent(data, d => d[dimension]))
  .thresholds(thresholds)


seedrandom = require('seedrandom')
```



```{ojs}
// pivot longer
// tidy(data, rename({ b: 'newB', c: 'newC' }));


// tidy(
//   data,
//   pivotLonger({
//     cols: ['canada', 'usa', 'campbell', 'brampton', 'boston'],
//     namesTo: 'place',
//     valuesTo: 'val',
//   })
// )


// tidy(data,
//   when((items) => items.length === 2, [
//     mutate({ y: 52 })
//   ])
// );


// tidy(data, leftJoin(joinData, { by: ['a', 'J'] }));

prices_tidy = tidy(
  prices, 
    rename({
      'residential_price_kwh_2021_dollars': 'residential_price',
      'commercial_price_kwh_2021_dollars': 'commercial_price',
      'other_price_kwh_2021_dollars': 'other_price',
    }),
    // pivotLonger({
    //   cols: ['residential', 'commercial', 'other'],
    //   namesTo: 'sector',
    //   valuesTo: 'price'
    // }),
    select([
      'year',
      'reporting_name',
      'acep_energy_region',
      'residential_price',
      'commercial_price',
      'other_price'
    ])
)

customers_pivot = tidy(
  prices,
    rename({
      'residential_price_kwh_2021_dollars': 'residential_price',
      'commercial_price_kwh_2021_dollars': 'commercial_price',
      'other_price_kwh_2021_dollars': 'other_price',
    }),
    rename({
      'residential_customers': 'residential',
      'commercial_customers': 'commercial',
      'other_customers': 'other',
    }),
    pivotLonger({
      cols: ['residential', 'commercial', 'other'],
      namesTo: 'sector',
      valuesTo: 'customers'
    }),
    select([
      'year',
      'reporting_name',
      'acep_energy_region',
      'residential_price',
      'commercial_price',
      'other_price',
      'customers',
      'total_customers'
    ])
)

// prices_customers_long = tidy(
//   prices_pivot,
//     leftJoin(customers_pivot,
//       { by: ['year', 'aea_sales_reporting_id', 'reporting_name', 'sector'] }),
//     select([
//       'year',
//       'reporting_name',
//       'acep_energy_region',
//       'sector',
//       'price',
//       'customers',
//       'total_customers'
//     ])
// )

data = tidy(
  prices_tidy,
    filter((d) => d.year < 2020),
    filter((d) => d.reporting_name != "Lime Village"),
    filter((d) => d.reporting_name != "Healy Lake"))
    ;


```
