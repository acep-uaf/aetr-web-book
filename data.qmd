---
title: "Data Portal"
subtitle: "Download the data used to build this web book"
date-modified: last-modified
date-format: "MMM D, YYYY [at] HH:mm"
output:
  quarto::quarto_html:
    pre_processor: quarto::observable
echo: false
---


```{ojs}
// load libraries
stdlib = require("@observablehq/stdlib")
d3 = require("d3@7")

// connect to database
db = FileAttachment("data/working/aetr.db").sqlite()

```

```{ojs}
//| eval: false
// This chunk make the fancy dropdown database veiwing tool
// Currently disabled, set `eval: true` to run
viewof dbTable = Inputs.select((await db.describe()).value.map(d => d.name), 
                    { label: "Table" })
data = db.query(`SELECT * FROM ${dbTable}`)
Inputs.table(data)

```

The table and downloadable CSV are rendered directly from the SQLite database!
```{ojs}
weighted_prices = db.query(`SELECT * FROM weighted_prices`)
Inputs.table(weighted_prices)
```

```{ojs}
{
  const div = DOM.element('div');
  const button = downloadButton([]);
  return button;
}

// build the download button function
downloadButton = (weighted_prices, filename = 'weighted_prices.csv') => {
  const csv = new Blob([d3.csvFormat(weighted_prices)], { type: "text/csv" });
  const size = (csv.size / 1024).toFixed(0);

  const button = DOM.download(
    csv,
    filename,
    `Download ${filename} (~${size} KB)`
  );
  return button;
}
```



