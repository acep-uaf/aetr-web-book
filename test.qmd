---
title: "Map"
subtitle: "Map playground"
date-modified: "2024-03-22T12:08:00-08:00"
date-format: "MMM D, YYYY [at] HH:mm z"
output:
  quarto::quarto_html:
    pre_processor: quarto::observable
execute:
    echo: false
---

```{ojs}
// build a library
stdlib = require("@observablehq/stdlib")
d3 = require("d3@7")

L = require('leaflet@1.9.4')
html`<link href='${resolve('leaflet@1.2.0/dist/leaflet.css')}' rel='stylesheet' />`

bootstrap=require("bootstrap")
css=html`<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">`
```





```{ojs}
map = {
    // You'll often see Leaflet examples initializing a map like L.map('map'),
    // which tells the library to look for a div with the id 'map' on the page.
    // In Observable, we instead create a div from scratch in this cell, so it's
    // completely self-contained.
    let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });

    // Note that I'm yielding the container pretty early here: this allows the
    // div to be placed on the page. This is important, because Leaflet uses
    // the div's .offsetWidth and .offsetHeight to size the map. If I were
    // to only return the container at the end of this method, Leaflet might
    // get the wrong idea about the map's size.
    yield container;

    // Now we create a map object and add a layer to it.
    let map = L.map(container).setView([58.35175294670148, -134.6442463060413], 11);

    let hillshade = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', 
        {attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
        });
  
    hillshade.addTo(map);


}


```


<br>
<br>


```{ojs}
//| echo: true

metadata = FileAttachment("data/metadata.json").json();

test = metadata.resources[0].schema.fields

Inputs.table(test)

button(test, 'test.csv')

```


```{ojs}
// download button function
button = (data, filename = 'data.csv') => {
  const downloadData = new Blob([d3.csvFormat(data)], { type: "text/csv" });

  const size = (downloadData.size / 1024).toFixed(1);
  const button = DOM.download(
    downloadData,
    filename,
    `Download ${filename} (${size} KB)`
  );
  return button;
}

```